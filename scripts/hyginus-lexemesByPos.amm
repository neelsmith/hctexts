val myBT = coursierapi.MavenRepository.of("https://dl.bintray.com/neelsmith/maven")
interp.repositories() ++= Seq(myBT)

import $ivy.`edu.holycross.shot::ohco2:10.18.2`
import $ivy.`edu.holycross.shot.cite::xcite:4.2.0`
import $ivy.`edu.holycross.shot::midvalidator:10.0.0`
import $ivy.`edu.holycross.shot::latincorpus:2.2.2`
import $ivy.`edu.holycross.shot::latphone:2.7.2`
// It would be nice to visualize, so let's use the
// plotly library with ammonite sh:
// Make plotly libraries available to this notebook:
import $ivy.`org.plotly-scala::plotly-almond:0.7.1`

// Import plotly libraries, and set display defaults suggested for use in Jupyter NBs:
import plotly._, plotly.element._, plotly.layout._, plotly.Almond._
repl.pprinter() = repl.pprinter().copy(defaultHeight = 3)


import edu.holycross.shot.cite._
import edu.holycross.shot.ohco2._
import edu.holycross.shot.latin._
import edu.holycross.shot.mid.validator._
import edu.holycross.shot.latincorpus._

import scala.io.Source


// 1. Load a citable corpus from a URL
val hyginusUrl = "https://raw.githubusercontent.com/neelsmith/hctexts/master/cex/hyginus.cex"
val corpus = CorpusSource.fromUrl(hyginusUrl, cexHeader = true)

// 2. Add orthography to create a tokenizable corpus.
// Be patient: it can take a moment to tokenize your complete corpus.
val tcorpus = TokenizableCorpus(corpus, Latin23Alphabet )


// 3. Add morphological parsing to create a `LatinCorpus`
val hyginusFstUrl = "https://raw.githubusercontent.com/neelsmith/hctexts/master/parser-output/hyginus/hyginus-parses.txt"
val fstOutput = Source.fromURL(hyginusFstUrl).getLines.toVector

// This step can take a moment, too, as it attempts to associate a
// morphological analysis with every lexical token.
val lhyg = LatinCorpus.fromFstLines(
  corpus,
  Latin23Alphabet,
  fstOutput,
  strict = false
)
val hygHist = lhyg.lexemeHistogram
//////////////////////////END BASIC SETUP ////////////////////////////////////


// USE TOKENS IN lhyg.analyzed


// Functions to relate PoS and lexeme identifiers
def posIdCounts(tkns: Vector[LatinToken]): Vector[(String, String, Int)] = {
  tkns.map(a =>
  {
    val id = a.analyses(0).lemmaId
    val pos = a.analyses(0).posLabel
   (id, pos,hygHist.countForItem(id))
 }).distinct
}
def posCountMap(tkns: Vector[LatinToken]): Map[String, Vector[(String, String, Int)]] = {
  posIdCounts(tkns).groupBy{ case (id,pos,count) => pos }
}
def posOccurrences(tkns: Vector[LatinToken]): Vector[(String, Int)] = {
  posCountMap(tkns).toVector.map{ case (pos,v) => (pos, v.map(_._3).sum)}
}
def posLexemeCounts(tkns: Vector[LatinToken]) : Vector[(String, Int)]= {
   posCountMap(tkns).toVector.map{ case (pos,v) => (pos, v.size) }
}
def lexemeDensityByPos(tkns: Vector[LatinToken]) : Vector[Double]= {
  val occurrenceCounts = posOccurrences(tkns).sortBy( _._1).map(_._2)
  val lexemeCounts = posLexemeCounts(tkns).sortBy( _._1).map(_._2)
  lexemeCounts.zip(occurrenceCounts).map {
    case (lex,occ) => occ / lex.toDouble
  }
}

val posList = posLexemeCounts(lhyg.analyzed).sortBy( _._1).map(_._1)


/// HYGINUS:
val hygPosOccurrences = posOccurrences(lhyg.analyzed).sortBy( _._1).map(_._2)
val hygLexemeCounts = posLexemeCounts(lhyg.analyzed).sortBy( _._1).map(_._2)

val occurrencesBar =  Bar(x = posList, y = hygPosOccurrences, name = "Occurrences")
val lexemesBar =  Bar(x = posList, y = hygLexemeCounts, name = "Number of lexemes")


val jointLayout = Layout(
  barmode = BarMode.Group,
    xaxis = Axis(
        title = "Analytical type",
        showgrid = false,
        zeroline = false
    ),
    yaxis = Axis(
        title = "Counts"
    )
)
val jointData = Seq(
  occurrencesBar,
  lexemesBar
)
plot(jointData, jointLayout)







val density = lexemeDensityByPos(lhyg.analyzed)


val densityPlot = Vector(
  Bar(x = posList, y = density)
)
val densityLayout = Layout(
  title = "Average frequency of individual lexemes",
  xaxis = Axis(
      title = "Analytical type",
      showgrid = false,
      zeroline = false
  ),
  yaxis = Axis(
      title = "Ratio of lexemes to occurrences"
  )
)
plot(densityPlot, densityLayout)
