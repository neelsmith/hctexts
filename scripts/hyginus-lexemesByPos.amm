val myBT = coursierapi.MavenRepository.of("https://dl.bintray.com/neelsmith/maven")
interp.repositories() ++= Seq(myBT)

import $ivy.`edu.holycross.shot::ohco2:10.18.2`
import $ivy.`edu.holycross.shot.cite::xcite:4.2.0`
import $ivy.`edu.holycross.shot::midvalidator:10.0.0`
import $ivy.`edu.holycross.shot::latincorpus:2.2.2`
import $ivy.`edu.holycross.shot::latphone:2.7.2`
// It would be nice to visualize, so let's use the
// plotly library with ammonite sh:
// Make plotly libraries available to this notebook:
import $ivy.`org.plotly-scala::plotly-almond:0.7.1`

// Import plotly libraries, and set display defaults suggested for use in Jupyter NBs:
import plotly._, plotly.element._, plotly.layout._, plotly.Almond._
repl.pprinter() = repl.pprinter().copy(defaultHeight = 3)


import edu.holycross.shot.cite._
import edu.holycross.shot.ohco2._
import edu.holycross.shot.latin._
import edu.holycross.shot.mid.validator._
import edu.holycross.shot.latincorpus._

import scala.io.Source


// 1. Load a citable corpus from a URL
val hyginusUrl = "https://raw.githubusercontent.com/neelsmith/hctexts/master/cex/hyginus.cex"
val corpus = CorpusSource.fromUrl(hyginusUrl, cexHeader = true)

// 2. Add orthography to create a tokenizable corpus.
// Be patient: it can take a moment to tokenize your complete corpus.
val tcorpus = TokenizableCorpus(corpus, Latin23Alphabet )


// 3. Add morphological parsing to create a `LatinCorpus`
val hyginusFstUrl = "https://raw.githubusercontent.com/neelsmith/hctexts/master/parser-output/hyginus/hyginus-parses.txt"
val fstOutput = Source.fromURL(hyginusFstUrl).getLines.toVector

// This step can take a moment, too, as it attempts to associate a
// morphological analysis with every lexical token.
val lhyg = LatinCorpus.fromFstLines(
  corpus,
  Latin23Alphabet,
  fstOutput,
  strict = false
)
val hygHist = lhyg.lexemeHistogram
//////////////////////////END BASIC SETUP ////////////////////////////////////



val posIdCounts = lhyg.analyzed.map(a =>
  {
    val id = a.analyses(0).lemmaId
    val pos = a.analyses(0).posLabel
   (id, pos,hygHist.countForItem(id))
 }).distinct


val posMap = posIdCounts.groupBy{ case (id,pos,count) => pos }
val posOccurrences = posMap.toVector.map{ case (pos,v) => (pos, v.map(_._3).sum)}
val posLexemeCounts = posMap.toVector.map{ case (pos,v) => (pos, v.size) }



val lexemeCounts = posLexemeCounts.sortBy( _._1).map(_._2)
val occurrenceCounts = posOccurrences.sortBy(_._1).map(_._2)
val posList = posLexemeCounts.sortBy( _._1).map(_._1)


val occurrences =  Bar(x = posList, y = occurrenceCounts, name = "Occurrences")
val lexemes =  Bar(x = posList, y = lexemeCounts, name = "Number of lexemes")


val jointLayout = Layout(
  barmode = BarMode.Group,
    xaxis = Axis(
        title = "Analytical type",
        showgrid = false,
        zeroline = false
    ),
    yaxis = Axis(
        title = "Counts"
    )
)
val jointData = Seq(
  occurrences,
  lexemes
)
plot(jointData, jointLayout)

/*

//val posGroups = top400Freqs.groupBy(fr => fr.item)

println(freqs.take(10).mkString("\n\n"))
*/
/*
val top400Freqs = freqs.take(400)

val posGroups = top400Freqs.groupBy(fr => fr.item)
val posCounts = posGroups.toVector.map{ case (pos, freqsV) => pos -> freqsV.map(f => f.count).sum }

val topPosCounts = posCounts.toVector.sortBy( _._2).map{ case(p,c) => edu.holycross.shot.histoutils.Frequency(p,c)}

val topPosHisto = edu.holycross.shot.histoutils.Histogram(topPosCounts).sorted




// PLOT DISTRIBTION BY PoS:
val items = topPosHisto.sorted.frequencies.map(fr => fr.item)
val counts = topPosHisto.sorted.frequencies.map(fr => fr.count)

val topPosPlot = Vector(
  Bar(x = items, y = counts)
)
val layout = Layout(
  title = "Top 400 lexemes, by analytical type"
)
plot(topPosPlot, layout)
*/


//val second400Freqs = freqs.slice(400, 800)
/*
val tier2Groups = second400Freqs.groupBy(fr => fr.item)
val tier2Counts = tier2Groups.toVector.map{ case (pos, freqsV) => pos -> freqsV.map(f => f.count).sum }

val tier2PosCounts = tier2Counts.toVector.sortBy( _._2).map{ case(p,c) => edu.holycross.shot.histoutils.Frequency(p,c)}

val tier2PosHisto = edu.holycross.shot.histoutils.Histogram(tier2PosCounts).sorted

val items = tier2PosHisto.sorted.frequencies.map(fr => fr.item)
val counts = tier2PosHisto.sorted.frequencies.map(fr => fr.count)

val tierPosPlot = Vector(
  Bar(x = items, y = counts)
)
plot(tierPosPlot)
*/
