val myBT = coursierapi.MavenRepository.of("https://dl.bintray.com/neelsmith/maven")
interp.repositories() ++= Seq(myBT)

import $ivy.`edu.holycross.shot::ohco2:10.18.2`
import $ivy.`edu.holycross.shot.cite::xcite:4.2.0`
import $ivy.`edu.holycross.shot::midvalidator:10.0.0`
import $ivy.`edu.holycross.shot::latincorpus:2.2.2`
import $ivy.`edu.holycross.shot::latphone:2.7.2`
// It would be nice to visualize, so let's use the
// plotly library with ammonite sh:
// Make plotly libraries available to this notebook:
import $ivy.`org.plotly-scala::plotly-almond:0.7.1`

// Import plotly libraries, and set display defaults suggested for use in Jupyter NBs:
import plotly._, plotly.element._, plotly.layout._, plotly.Almond._
repl.pprinter() = repl.pprinter().copy(defaultHeight = 3)


import edu.holycross.shot.cite._
import edu.holycross.shot.ohco2._
import edu.holycross.shot.latin._
import edu.holycross.shot.mid.validator._
import edu.holycross.shot.latincorpus._

import scala.io.Source


// 1. Load citable corpora from a URL
val livyFile = "cex/livy.cex"
val livy = CorpusSource.fromFile(livyFile, cexHeader = true)

val mtFile = "cex/livy-mt.cex"
val mt = CorpusSource.fromFile(mtFile, cexHeader = true)

// 2. Add orthography to create a tokenizable corpus.
// Be patient: it can take a moment to tokenize your complete corpus.
val tlivy = TokenizableCorpus(livy, Latin24Alphabet )
val tmt = TokenizableCorpus(mt, Latin24Alphabet )



def simpleBarForCorpus(tcorpus: TokenizableCorpus, label: String): Bar = {
    val pctBrackets = Vector(50,55,60,65,70,75,80,85)
    val tokensNeeded = pctBrackets.map(pct => tcorpus.lexHistogram.takePercent(pct).size)
    Bar(x = pctBrackets, y = tokensNeeded, name = label)
}

def barForCorpus(tcorpus: TokenizableCorpus): Bar = {
    val pctBrackets = Vector(50,55,60,65,70,75,80,85)
    val tokensNeeded = pctBrackets.map(pct => tcorpus.lexHistogram.takePercent(pct).size)
    val xLabels = for ((pct, tkns) <- pctBrackets zip tokensNeeded) yield {
      pct + "% = " + tkns
    }
    Bar(x = xLabels, y = tokensNeeded)
}
def pctCoveragePlot(tcorpus: TokenizableCorpus, label: String) = {
  val tokensPercentPlot = Vector(
    barForCorpus(tcorpus)
    //Bar(x = xLabels, y = tokensNeeded)
  )
  val tokensPercentLayout = Layout(
    title = "Distinct tokens covering X pct of " + label,
    xaxis = Axis(
        title = "Distinct tokens in corpus of " + tcorpus.lexHistogram.size + " tokens",
        showgrid = false,
        zeroline = false
    ),
    yaxis = Axis(
        title = "Percent of text covered"
    )
  )
  (tokensPercentPlot, tokensPercentLayout)
}


val livyAllPlot = pctCoveragePlot(tlivy, "Livy")
val mtPlot = pctCoveragePlot(tmt, "Minkova-Tunberg selections from Livy")

plot(mtPlot._1, mtPlot._2)
plot(livyAllPlot._1, livyAllPlot._2)



val jointLayout = Layout(
  barmode = BarMode.Group,
    xaxis = Axis(
        title = "Percent of text covered",
        showgrid = false,
        zeroline = false
    ),
    yaxis = Axis(
        title = "Distinct tokens"
    )
)
val jointData = Seq(
  simpleBarForCorpus(tlivy, "Livy (" + tlivy.size + " tokens)"),
  simpleBarForCorpus(tmt, "Minkova-Tunberg (" + tmt.size + " tokens)")
)
plot(jointData, jointLayout)


val cex = tlivy.lexHistogram.cex("#")

import java.io.PrintWriter
new PrintWriter("livy-hist.cex"){write(cex); close;}



val livyFstFile = "li-work/livy-parsed.txt"
val livyFstOutput = Source.fromFile(livyFstFile).getLines.toVector
val livyMorphed = LatinCorpus.fromFstLines(
  livy,
  Latin24Alphabet,
  livyFstOutput,
  strict = false
)


// THIS IS NOT HELPFUL ON TOKENS:
// MUST BE LEMMATIZED TO MAKE SENSE
/*
val mtTop400 = tmt.lexHistogram.sorted.frequencies.take(400).map(f => f.item)
val livyTop400 = tlivy.lexHistogram.sorted.frequencies.take(400).map(f => f.item)

val livDiffs = mtTop400 diff livyTop400
livDiffs.size
val livSetDiffs = mtTop400.toSet diff livyTop400.toSet
//println(livDiffs.sorted.mkString("\n"))
*/
