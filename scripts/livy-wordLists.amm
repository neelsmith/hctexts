val myBT = coursierapi.MavenRepository.of("https://dl.bintray.com/neelsmith/maven")
interp.repositories() ++= Seq(myBT)

import $ivy.`edu.holycross.shot::ohco2:10.18.2`
import $ivy.`edu.holycross.shot.cite::xcite:4.2.0`
import $ivy.`edu.holycross.shot::midvalidator:10.0.0`
import $ivy.`edu.holycross.shot::latincorpus:2.2.2`
import $ivy.`edu.holycross.shot::latphone:2.7.2`
// It would be nice to visualize, so let's use the
// plotly library with ammonite sh:
// Make plotly libraries available to this notebook:
import $ivy.`org.plotly-scala::plotly-almond:0.7.1`

// Import plotly libraries, and set display defaults suggested for use in Jupyter NBs:
import plotly._, plotly.element._, plotly.layout._, plotly.Almond._
repl.pprinter() = repl.pprinter().copy(defaultHeight = 3)


import edu.holycross.shot.cite._
import edu.holycross.shot.ohco2._
import edu.holycross.shot.latin._
import edu.holycross.shot.mid.validator._
import edu.holycross.shot.latincorpus._

import scala.io.Source


// 1. Load a citable corpus from a URL
val livyFile = "cex/livy.cex"
val livy = CorpusSource.fromFile(livyFile, cexHeader = true)


// 2. Add orthography to create a tokenizable corpus.
// Be patient: it can take a moment to tokenize your complete corpus.
val tlivy = TokenizableCorpus(livy, Latin24Alphabet )


// What vocab list gives you 90% coverage?
tlivy.lexHistogram.size


def simpleBarForCorpus(tcorpus: TokenizableCorpus, label: String): Bar = {
    val pctBrackets = Vector(50,55,60,65,70,75,80,85)
    val tokensNeeded = pctBrackets.map(pct => tcorpus.lexHistogram.takePercent(pct).size)
    Bar(x = pctBrackets, y = tokensNeeded, name = label)
}


def barForCorpus(tcorpus: TokenizableCorpus): Bar = {
    val pctBrackets = Vector(50,55,60,65,70,75,80,85)
    val tokensNeeded = pctBrackets.map(pct => tcorpus.lexHistogram.takePercent(pct).size)
    val xLabels = for ((pct, tkns) <- pctBrackets zip tokensNeeded) yield {
      pct + "% = " + tkns
    }
    Bar(x = xLabels, y = tokensNeeded)
}
def pctCoveragePlot(tcorpus: TokenizableCorpus, label: String) = {
  val tokensPercentPlot = Vector(
    barForCorpus(tcorpus)
    //Bar(x = xLabels, y = tokensNeeded)
  )
  val tokensPercentLayout = Layout(
    title = "Distinct tokens covering X pct of " + label,
    xaxis = Axis(
        title = "Distinct tokens in corpus of " + tcorpus.lexHistogram.size + " tokens",
        showgrid = false,
        zeroline = false
    ),
    yaxis = Axis(
        title = "Percent of text covered"
    )
  )
  (tokensPercentPlot, tokensPercentLayout)
}


val livyAllPlot = pctCoveragePlot(tlivy, "Livy")
plot(livyAllPlot._1, livyAllPlot._2)


val mtFile = "cex/livy-mt.cex"
val mt = CorpusSource.fromFile(mtFile, cexHeader = true)
val tmt = TokenizableCorpus(mt, Latin24Alphabet )

val mtPlot = pctCoveragePlot(tmt, "Minkova-Tunberg selections from Livy")


plot(mtPlot._1, mtPlot._2)
plot(livyAllPlot._1, livyAllPlot._2)

val jointLayout = Layout(
  barmode = BarMode.Group
)
val jointData = Seq(
  simpleBarForCorpus(tlivy, "All of Livy"),
  simpleBarForCorpus(tmt, "Minkova-Tunberg selections")
)
plot(jointData, jointLayout)

/*
val threshholds = Vector(10,9,8,7,6,5,4,3,2,1)
val tokenCounts = threshholds.reverse.map(t => tcorpus.lexHistogram.frequencies.filter(_.count >= t).size)

val coveragePlot = Vector(
  Bar(x = threshholds.reverse, y = tokenCounts)
)
val coverageLayout = Layout(
  title = "Vocabulary: tokens appearing N times",
  xaxis = Axis(
      title = "Number of appearances in corpus of " + tcorpus.lexHistogram.total + " tokens",
      showgrid = false,
      zeroline = false
  ),
  yaxis = Axis(
      title = "Number of unique tokens"
  )
)
plot(coveragePlot, coverageLayout)



val tokenPcts = threshholds.reverse.map(t => tcorpus.lexHistogram.percentForCount(t))

val percentLayout = Layout(
  title = "Hyginus: coverage for tokens appearing X or more times",
  xaxis = Axis(
      title = "Tokens appearing X times",
      showgrid = false,
      zeroline = false
  ),
  yaxis = Axis(
      title = "Percent of occurrences in corpus"
  )
)



val pctFor2 = tcorpus.lexHistogram.percentForCount(2)
val histFor2 = edu.holycross.shot.histoutils.Histogram(tcorpus.lexHistogram.takePercent(pctFor2))



val pctXLabels =  threshholds.reverse.map { t =>
  val pct = tcorpus.lexHistogram.percentForCount(t)
  val histForPct = edu.holycross.shot.histoutils.Histogram(tcorpus.lexHistogram.takePercent(pct))
  histForPct

  histForPct.size + " tokens"
}


val percentPlot = Vector(
  Bar(
    x = threshholds.reverse,
    y = tokenPcts,
    text = pctXLabels
  )
)

plot(percentPlot, percentLayout)

*/

/*
val items = tcorpus.lexHistogram.sorted.frequencies.map(fr => fr.item)
val counts = tcorpus.lexHistogram.sorted.frequencies.map(fr => fr.count)

val topPosPlot = Vector(
  Bar(x = items, y = counts)
)
val layout = Layout(
  title = "Lexical tokens"
)
plot(topPosPlot, layout)
*/
